// Code generated by fabricator-generate-plugin-go
//
// DO NOT EDIT.

package fabricatorgeneratetoolgo

import (
	"context"
	"os"
	"path"

	"code.cestus.io/libs/codegenerator/pkg/templating"
	"code.cestus.io/tools/fabricator/pkg/fabricator"
	"code.cestus.io/tools/fabricator/pkg/helpers"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"

	"code.cestus.io/tools/fabricator-generate-tool-go/pkg/fabricator-generate-tool-go/templates"
)

var _ = Describe("Generation", func() {
	It("Generates", func() {
		ctx := context.Background()
		packProvider := templating.NewPackProvider()
		packProvider.RegisterProvider(templating.NewEmbededPackProvider(templates.GetTemplates()))
		io := fabricator.NewGinkoTestIOStreams()
		file, err := os.Open("./testdata/deserialize.yml")
		Expect(err).ToNot(HaveOccurred())
		config, err := LoadPluginConfig(file)
		Expect(err).ToNot(HaveOccurred())
		root, err := os.MkdirTemp("./testdata", "generation")
		Expect(err).ToNot(HaveOccurred())
		executor := helpers.NewExecutor(root, io).WithEnv("GOWORK", "off")
		err = executor.Run(ctx, "go", "mod", "init", "example.com/testmodule")
		Expect(err).ToNot(HaveOccurred())
		plugin, err := newPlugin(ctx, io, config, root, packProvider)
		Expect(err).ToNot(HaveOccurred())
		err = plugin.Generate(ctx, io)
		Expect(err).ToNot(HaveOccurred())
		// add version.yaml
		vyaml, err := os.Create(path.Join(root, "version.yml"))
		Expect(err).ToNot(HaveOccurred())
		defer vyaml.Close()
		vyaml.WriteString("current: 0.0.0\n")
		vyaml.WriteString("next: 0.0.0\n")
		err = plugin.RunPostGeneration(ctx, io, []string{"go", "build", "./..."})
		Expect(err).ToNot(HaveOccurred())
		//err = os.RemoveAll(root)
		Expect(err).ToNot(HaveOccurred())
	})
})
