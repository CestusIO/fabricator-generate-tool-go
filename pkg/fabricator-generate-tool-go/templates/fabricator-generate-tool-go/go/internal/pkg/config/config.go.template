{{ CodeSectionFileHeader | ToGoComment }}

package config

import (
// region CODE_REGION(COMMON_IMPORT)
	"errors"
	"os"

	"github.com/peterbourgon/ff/v4"
	"github.com/peterbourgon/ff/v4/fftoml"

	"code.cestus.io/libs/flags/pkg/flags"

	"{{.GoModule}}/internal/pkg/app"
//endregion
)

// region CODE_REGION(COMMON_CONFIG)
type Config struct {
	App *app.Config
	// endregion
}

// region CODE_REGION(COMMON_PROVIDER)

//ProvideFlagSet provides a flag set
func ProvideFlagSet() *flags.FlagSet {
	return flag.NewFlagSet("cmdsample", flag.ExitOnError)
}

//ProvideConfig provides a config
func ProvideConfig(flagset *flags.FlagSet) (Config, error) {
	conf := Config{
		App: app.RegisterConfig(flagset),
		// endregion
	}
	// region CODE_REGION(COMMON_FLAGSET)
	// skip until the first flag
	args := os.Args
	for len(args) > 0 {
		arg := args[0]
		if strings.HasPrefix(arg, "-") {
			break
		}
		args = args[1:]
	}
	_ = flagset.String(0, "config", "", "config file (optional)")
	err := ff.Parse(flagset, argList,
		ff.WithConfigFileFlag("config"),
		ff.WithConfigAllowMissingFile(),
		ff.WithConfigIgnoreUndefinedFlags(),
		ff.WithConfigFileParser(fftoml.Parse),
		ff.WithEnvVarPrefix("{{.PluginComponent.Spec.ToolName | ToEnvVarName}}"),
		flagset.WithArgsIgnoreUndefinedFlags(),
	)
	if errors.Is(err, flags.ErrHelp) {
		err = nil
	}
	// endregion
	return conf, err
}
