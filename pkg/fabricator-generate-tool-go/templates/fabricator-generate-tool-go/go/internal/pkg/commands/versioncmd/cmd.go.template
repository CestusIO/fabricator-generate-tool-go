{{ CodeSectionFileHeader | ToGoComment }}
package versioncmd

import (
// region CODE_REGION(COMMON_IMPORTS)
	"context"
	"fmt"

	"code.cestus.io/libs/buildinfo"
	"github.com/go-logr/logr"
	"github.com/peterbourgon/ff/v4"

	"code.cestus.io/libs/flags/pkg/flags"

	"{{.GoModule}}/internal/pkg/commands/rootcmd"
//endregion
)

// region CODE_REGION(CONFIG)
type Config struct {
	rootConfig *rootcmd.Config
	fs         *flags.FlagSet
	log        logr.Logger
	io         rootcmd.IOStreams
	buildinfo  buildinfo.BuildInfo
	//endregion
}

// region CODE_REGION(IMPLEMENT)

// New returns a  ff.Command for the version subcommand.
func New(conf *Config) *ff.Command {
	return &ff.Command{
		Name:       "version",
		Usage: "{{.PluginComponent.Spec.ToolName | ToLower}} version [flags] ",
		ShortHelp:  "version",
		FlagSet:    conf.fs,
		Exec:       conf.CmdRunFunc(),
	}
}


func ProvideConfig(rootConfig *rootcmd.Config,
	log logr.Logger,
	io rootcmd.IOStreams,
	buildinfo buildinfo.BuildInfo,
) *Config {
	cfg := Config{
		rootConfig: rootConfig,
		log:        log,
		io:         io,
	}
	cfg.fs = flags.NewFlagSet("{{.PluginComponent.Spec.ToolName | ToLower}} version")
	cfg.buildinfo = buildinfo
	rootConfig.RegisterFlags(cfg.fs)
	return &cfg
}

func (conf *Config) CmdRunFunc() func(ctx context.Context, args []string) error {
	return func(ctx context.Context, args []string) error {
		fmt.Fprintf(conf.io.Out, "Name:       %s\n", conf.buildinfo.Name)
		fmt.Fprintf(conf.io.Out, "Version:    %s\n", conf.buildinfo.Version)
		fmt.Fprintf(conf.io.Out, "BuildDate:  %s\n", conf.buildinfo.BuildDate)
		fmt.Fprintf(conf.io.Out, "Go-Version: %s\n", conf.buildinfo.GoVersion)
		fmt.Fprintf(conf.io.Out, "Platform:   %s\n", conf.buildinfo.Platform)
		fmt.Fprintf(conf.io.Out, "OS:         %s\n", conf.buildinfo.OS)

		return nil
	}
}

//endregion
