{{ CodeSectionFileHeader | ToGoComment }}

package rootcmd

import (
// region CODE_REGION(COMMON_IMPORTS)
	"context"
	"code.cestus.io/libs/flags/pkg/flags"
	"github.com/peterbourgon/ff/v4"
	"github.com/peterbourgon/ff/v4/fftoml"
//endregion
)

// region CODE_REGION(COMMON_CONFIG)

// Config for the root command, including flags and types that should be
// available to each subcommand.
type Config struct {
	Fs         *flags.FlagSet
	configFile *string
	options    []ff.Option
//endregion
}

func (c *Config) ConfigFile() *string {
	return c.configFile
}

func (c *Config) Options() []ff.Option {
	return c.options
}

// region CODE_REGION(COMMON_NEW)

// New constructs a usable ff.Command and an empty RootConfig. The config's token
// and verbose fields will be set after a successful parse. The caller must
// initialize the config's object API client field.
func New(cfg *Config) *ff.Command {

	cmd := &ff.Command{
		Name:       "{{.PluginComponent.Spec.ToolName | ToLower}}",
		Usage: "{{.PluginComponent.Spec.ToolName | ToLower}} [flags] <subcommand> [flags] [<arg>...]",
		Flags:    cfg.Fs,
		Exec:       cfg.Exec,
	}
//endregion
	return cmd
}

// region CODE_REGION(IMPLEMENT)

// RegisterFlags registers the flag fields into the provided flags.FlagSet. This
// helper function allows subcommands to register the root flags into their
// flagsets, creating "global" flags that can be passed after any subcommand at
// the commandline.
func (c *Config) RegisterFlags(fs *flags.FlagSet) {

}

// Exec function for this command.
func (c *Config) Exec(context.Context, []string) error {
	// The root command has no meaning, so if it gets executed,
	// display the usage text to the user instead.
	return flags.ErrHelp
}

// ProvideConfig profides a command configurartion
func ProvideConfig() *Config {
	cfg := Config{}
	cfg.Fs = flags.NewFlagSet("{{.PluginComponent.Spec.ToolName | ToLower}}")
	cfg.configFile = cfg.Fs.String(0, "config", "./config.toml", "specifies the config file")
	cfg.RegisterFlags(cfg.Fs)
	cfg.options = []ff.Option{
		ff.WithConfigFileParser(fftoml.Parse),
		ff.WithEnvVarPrefix("{{.PluginComponent.Spec.ToolName | ToEnvVarName}}"),
		ff.WithConfigFileFlag("config"),
		ff.WithConfigIgnoreUndefinedFlags(),
		ff.WithConfigAllowMissingFile(),
		cfg.Fs.WithArgsIgnoreUndefinedFlags(),
//endregion
	}
	return &cfg
}


